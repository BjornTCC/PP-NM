using System;
using static System.Console;
using static System.Math;

public static class main{

	public class cholesky{
		public readonly matrix L;
		public readonly matrix LT;
		public readonly int dim;

		//constructor
		public cholesky(matrix A){
			if(A.size1 != A.size2) throw new ArgumentException($"LLT: non-square matrix, size: ({A.size1}, {A.size2})");
			dim = A.size1;
			L = new matrix(dim);
			for(int i=0;i<dim;i++)
			for(int j=0;j<=i;j++){
				double sum = 0;
				for(int k=0;k<j;k++)sum+=L[i,k]*L[j,k];
				if(i==j) L[i,j] = Pow(A[i,j]-sum,0.5);
				else L[i,j] = (A[i,j]-sum)/L[j,j];
			}
			LT = L.transpose();
		}

		//methods

		public double determinant(){
			double res = 1;
			for(int i=0;i<dim;i++)res*=L[i,i];
			return res*res;
		}

		public static vector backsub(matrix A, vector b){ //back substitution inplace
			for(int i = b.size-1; i >= 0; i--){
	                        double sum = 0;
        	                for(int j = i + 1; j < b.size; j++)sum+=A[i,j]*b[j];
	                        b[i] = (b[i] - sum)/A[i,i];
                		}
                	return b;
		}//backsub

		public static vector forwardsub(matrix A, vector b){ //forward substitution inplace
                        for(int i = 0; i < b.size; i++){
                                double sum = 0;
                                for(int k = 0; k < i; k++)sum+=A[i,k]*b[k];
                                b[i] = (b[i] - sum)/A[i,i];
                                }
                        return b;
                }//backsub

	}//cholesky

	public static int Main(){
		int n = 3;
		matrix A = new matrix(n); matrix vs = new matrix(n);
		System.Random random = new System.Random();
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++) vs[i][j] = random.NextDouble();}	
		for(int i = 0; i < n; i++)
		for(int j = i; j < n; j++){
			A[i,j] = vs[i].dot(vs[j]);
			A[j,i] = A[i,j];
		}
		A.print("A =");
		cholesky LLT = new cholesky(A);
		LLT.L.print("L=");
		matrix res = LLT.L*LLT.LT;
		res.print("LLT=");
		if(res.approx(A)) WriteLine("LLT = A: Test success");
		else WriteLine("LLT = A: Test Failure");
		WriteLine("--------------------------------------------------------------");
		double det = LLT.determinant();
		WriteLine($"LLT det: {det}");
		double QR_det = Abs(QRGS.det(A));
                WriteLine($"QR det: {det}");
		if(Abs(det-QR_det)<1e-6) WriteLine("Determinant test success");
		else WriteLine("Determinant test failure");
		WriteLine("--------------------------------------------------------------");
		vector y = new vector(n);
		for(int i=0;i<n;i++)y[i] = random.NextDouble();
		vector x = y.copy();
		y.print("y=");
		cholesky.forwardsub(LLT.L,x);
		x.print("x=");
		vector Lx = LLT.L*x;
		Lx.print("L*x=");
		if(y.approx(Lx)) WriteLine("Equation solver test: Success");
		else WriteLine("Equation solver test: failure");
		return 0;
	}//Main
}//main
